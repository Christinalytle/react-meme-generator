{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","type","placeholder","onChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"gNAWeA,MATf,WACI,OACI,mCACI,qBAAKC,IAAI,iEAAiEC,IAAI,YAC9E,mD,0CCgEGC,E,kDAnEX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,qDAYd,WAAqB,IAAD,OAChBE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IAAME,EAASF,EAASG,KAAlBD,MACN,EAAKE,SAAS,CAACV,YAAaQ,S,0BAIxC,SAAaG,GACT,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACbC,KAAKL,SAAL,eAAgBG,EAAOC,M,0BAG3B,SAAaH,GACTA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAUL,KAAKnB,MAAMI,YAAYqB,QAC3DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CAACX,UAAWuB,M,oBAG9B,WACI,OACI,gCACI,uBAAME,UAAU,YAAYC,SAAUV,KAAKZ,aAA3C,UACI,uBAAOuB,KAAK,OAAOb,KAAK,UAAWc,YAAY,WAAWb,MAAOC,KAAKnB,MAAMC,QAAS+B,SAAUb,KAAKd,eACpG,uBAAOyB,KAAK,OAAOb,KAAK,aAAcc,YAAY,cAAcb,MAAOC,KAAKnB,MAAME,WAAY8B,SAAUb,KAAKd,eAG7G,4CAEJ,sBAAKuB,UAAU,OAAf,UACI,qBAAK/B,IAAKsB,KAAKnB,MAAMG,UAAWL,IAAI,KACpC,oBAAI8B,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GA/C3B+B,aCYbC,MAVf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.64d2fb54.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return(\n        <header>\n            <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"Problem\" />\n            <p>Meme Generator</p>\n        </header>\n    )\n}\n\nexport default Header","import React, {Component} from 'react'\n\nclass MemeGenerator extends Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs: []\n        }\n        this.handleChange = this.handleChange.bind(this) \n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    \n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const{memes} = response.data\n                this.setState({allMemeImgs: memes})\n            })\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        const randNum = Math.floor(Math.random()* this.state.allMemeImgs.length)\n        const randMemeImg = this.state.allMemeImgs[randNum].url \n        this.setState({randomImg: randMemeImg})\n    }\n\n    render() {\n        return(\n            <div>\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <input type=\"text\" name=\"topText\"  placeholder=\"Top Text\" value={this.state.topText} onChange={this.handleChange}/>\n                    <input type=\"text\" name=\"bottomText\"  placeholder=\"Bottom Text\" value={this.state.bottomText} onChange={this.handleChange}/>\n\n\n                    <button>Gen</button>\n                </form>\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n\n                </div>\n\n            </div>\n        )\n\n\n\n    }\n\n\n\n\n\n\n\n\n\n\n} \nexport default MemeGenerator","import './App.css';\nimport Header from './Header.js'\nimport MemeGenerator from './MemeGenerator.js'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}